{"version":3,"sources":["api.ts","WriteOMeterForm.js","App.js","serviceWorker.js","index.js"],"names":["analyzeWithCustomAlgorithms","text","fetch","method","headers","body","JSON","stringify","partsOfSpeech","ADJ","ADP","ADV","AUX","CONJ","DET","INTJ","NOUN","NUM","PART","PRON","PROPN","PUNCT","SCONJ","SYM","VERB","X","WriteOMeterForm","props","state","value","results","handleChange","bind","handleAnalysisMethodChange","handleSubmit","getClassByPartOfSpeech","showResults","event","this","setState","target","pos","toLowerCase","className","sents","length","words","tokens","class","map","token","index","classForToken","key","start","texts","preventDefault","response","json","console","error","hasResults","onSubmit","onChange","type","checked","showStatisticResults","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dc34bb59.chunk.js","sourcesContent":["export const API_HOST = 'https://vzjega.deta.dev'\n// export const API_HOST = 'http://localhost:8000'\n\nexport function analyzeWithSpacy(text: string) {\n  return fetch(`${API_HOST}/analyze-spacy`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      text,\n    }),\n  })\n}\n\n\nexport function analyzeWithCustomAlgorithms(text: string) {\n  return fetch(`${API_HOST}/analyze-custom`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      text,\n    }),\n  })\n}\n","import React from 'react'\nimport { analyzeWithCustomAlgorithms, analyzeWithSpacy } from './api.ts'\n\n\nconst partsOfSpeech = {\n  ADJ: 'επίθετο',\n  ADP: 'πρόθεση',\n  ADV: 'επίρρημα',\n  AUX: 'βοηθητικό ρήμα',\n  CONJ: 'σύνδεσμος',\n  DET: 'άρθρο',\n  INTJ: 'επιφώνημα',\n  NOUN: 'ουσιαστικό',\n  NUM: 'αριθμός',\n  PART: 'σωματίδιο',\n  PRON: 'αντωνυμία',\n  PROPN: 'κύριο όνομα',\n  PUNCT: 'στίξη',\n  SCONJ: 'δευτερεύουσα σύνδεση',\n  SYM: 'σύμβολο',\n  VERB: 'ρήμα',\n  X: 'άλλο',\n}\n\nclass WriteOMeterForm extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: 'Γράψτε εδώ το κείμενο προς ανάλυση.',\n      method: 'spacy-lib',\n      results: null,\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleAnalysisMethodChange = this.handleAnalysisMethodChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.getClassByPartOfSpeech = this.getClassByPartOfSpeech.bind(this)\n    this.showResults = this.showResults.bind(this)\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value })\n  }\n\n  handleAnalysisMethodChange(event) {\n    this.setState({ method: event.target.value })\n  }\n\n  getClassByPartOfSpeech(pos) {\n    return `wom-text__${pos.toLowerCase()}`\n  }\n\n  showStatisticResults() {\n    if (this.state.results) {\n      return (\n        <section className=\"wom-form__controls__method-options\">\n          <h3>Μερικά Αποτελέσματα</h3>\n          <p>Προτάσεις: {this.state.results.sents.length}</p>\n          <p>Λέξεις: {this.state.results.words.length}</p>\n        </section>\n      )\n    }\n  }\n  showResults() {\n    if (this.state.results && this.state.results.tokens) {\n      return (\n        <p class=\"text-results\">\n            {this.state.results.tokens.map((token, index) => {\n              const classForToken = this.getClassByPartOfSpeech(token.pos)\n              return (\n                <span key={token.start}>\n                  <span className={`wom-text ${classForToken}`}>\n                    {this.state.results.texts[index]}\n                    <sub> { partsOfSpeech[token.pos] }</sub>\n                  </span>{' '}\n                </span>\n              )\n            })}\n        </p>\n      )\n    }\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault()\n    try {\n      let response\n      if (this.state.method === 'spacy-lib') {\n        response = await analyzeWithSpacy(this.state.value)\n      } else {\n        response = await analyzeWithCustomAlgorithms(this.state.value)\n      }\n      const results = await response.json()\n      this.setState({ results })\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  render() {\n    const hasResults = !!this.state.results\n    return (\n      <form className=\"wom-form\" onSubmit={this.handleSubmit}>\n        <section className=\"wom-form__controls\">\n          <label className=\"wom-form__text-area\">\n            <textarea value={this.state.value} onChange={this.handleChange} />\n          </label>\n          <section>\n            <section className=\"wom-form__controls__method-options\">\n              <h3>Ανάλυση με</h3>\n              <p>\n                <label>\n                  τη βιβλιοθήκη SpaCy\n                  <input\n                    type=\"radio\"\n                    value=\"spacy-lib\"\n                    checked={this.state.method === 'spacy-lib'}\n                    onChange={this.handleAnalysisMethodChange}\n                  />\n                  <span className=\"wom-form__controls__method-options__radio\"></span>\n                </label>\n              </p>\n              <p>\n                <label>\n                  τους αλγορίθμους γραμματικής\n                  <input\n                    type=\"radio\"\n                    value=\"grammatical-algorithms\"\n                    checked={this.state.method === 'grammatical-algorithms'}\n                    onChange={this.handleAnalysisMethodChange}\n                  />\n                  <span className=\"wom-form__controls__method-options__radio\"></span>\n                </label>\n              </p>\n            </section>\n            {hasResults && this.showStatisticResults()}\n          </section>\n        </section>\n        <input className=\"wom-form__input\" type=\"submit\" value=\"Aνάλυση\" />\n        {hasResults && this.showResults()}\n      </form>\n    )\n  }\n}\nexport default WriteOMeterForm\n","import React from 'react';\nimport './App.css';\nimport WriteOMeterForm from './WriteOMeterForm'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Γραφῶμετρο</h1>\n      </header>\n      <WriteOMeterForm/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}