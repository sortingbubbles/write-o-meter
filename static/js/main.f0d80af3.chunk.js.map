{"version":3,"sources":["WriteOMeterForm.js","api.ts","App.js","serviceWorker.js","index.js"],"names":["WriteOMeterForm","props","state","value","method","results","handleChange","bind","handleAnalysisMethodChange","handleSubmit","showResults","event","this","setState","target","sents","length","words","preventDefault","text","fetch","headers","body","JSON","stringify","response","json","console","error","hasResults","isUsingSpacyLib","className","onSubmit","onChange","type","checked","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0TAyFeA,E,kDArFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,uLACPC,OAAQ,YACRC,QAAS,MAEX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,2BAA6B,EAAKA,2BAA2BD,KAAhC,gBAClC,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBAVF,E,yDAaNI,GACXC,KAAKC,SAAS,CAAEV,MAAOQ,EAAMG,OAAOX,U,iDAGXQ,GACzBC,KAAKC,SAAS,CAAET,OAAQO,EAAMG,OAAOX,U,oCAIrC,GAAIS,KAAKV,MAAMG,QACb,OACE,6BACE,sFAAeO,KAAKV,MAAMG,QAAQU,MAAMC,QACxC,oEAAYJ,KAAKV,MAAMG,QAAQY,MAAMD,W,4EAK1BL,G,gFACjBA,EAAMO,iB,kBClCcC,EDoCaP,KAAKV,MAAMC,MCnCvCiB,MAAM,GAAD,OAHU,0BAGV,YAAwB,CAClChB,OAAQ,OACRiB,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBL,W,cD6BMM,E,gBACgBA,EAASC,O,OAAzBrB,E,OACNO,KAAKC,SAAS,CAAER,Y,kDAEhBsB,QAAQC,MAAR,M,kCCxCC,IAAiBT,I,2GD6CpB,IAAMU,IAAejB,KAAKV,MAAMG,QACJO,KAAKV,MAAM4B,gBACvC,OACE,0BAAMC,UAAU,WAAWC,SAAUpB,KAAKH,cACxC,6BAASsB,UAAU,sBACjB,2BAAOA,UAAU,uBACf,8BAAU5B,MAAOS,KAAKV,MAAMC,MAAO8B,SAAUrB,KAAKN,gBAEpD,6BAASyB,UAAU,sCACjB,uFACA,2BACE,iHAEE,2BACEG,KAAK,QACL/B,MAAM,YACNgC,QAA+B,cAAtBvB,KAAKV,MAAME,OACpB6B,SAAUrB,KAAKJ,6BAEjB,0BAAMuB,UAAU,gDAGpB,2BACE,gMAEE,2BACEG,KAAK,QACL/B,MAAM,yBACNgC,QAA+B,2BAAtBvB,KAAKV,MAAME,OACpB6B,SAAUrB,KAAKJ,6BAEjB,0BAAMuB,UAAU,kDAKxB,2BAAOA,UAAU,kBAAkBG,KAAK,SAAS/B,MAAM,0CACtD0B,GAAcjB,KAAKF,mB,GAjFE0B,IAAMC,WEYrBC,MAXf,WACE,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAChB,6FAEF,kBAAC,EAAD,QCEcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3B,GACLD,QAAQC,MAAMA,EAAM4B,c","file":"static/js/main.f0d80af3.chunk.js","sourcesContent":["import React from 'react'\nimport { analyze } from './api.ts'\n\nclass WriteOMeterForm extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: 'Γράψτε εδώ το κείμενο προς ανάλυση.',\n      method: 'spacy-lib',\n      results: null,\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleAnalysisMethodChange = this.handleAnalysisMethodChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.showResults = this.showResults.bind(this)\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value })\n  }\n\n  handleAnalysisMethodChange(event) {\n    this.setState({ method: event.target.value })\n  }\n\n  showResults() {\n    if (this.state.results)\n      return (\n        <div>\n          <p>Προτάσεις: {this.state.results.sents.length}</p>\n          <p>Λέξεις: {this.state.results.words.length}</p>\n        </div>\n      )\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault()\n    try {\n      const response = await analyze(this.state.value)\n      const results = await response.json()\n      this.setState({ results })\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  render() {\n    const hasResults = !!this.state.results\n    const isUsingSpacyLibrary = this.state.isUsingSpacyLib\n    return (\n      <form className=\"wom-form\" onSubmit={this.handleSubmit}>\n        <section className=\"wom-form__controls\">\n          <label className=\"wom-form__text-area\">\n            <textarea value={this.state.value} onChange={this.handleChange} />\n          </label>\n          <section className=\"wom-form__controls__method-options\">\n            <h3>Ανάλυση με</h3>\n            <p>\n              <label>\n                τη βιβλιοθήκη SpaCy\n                <input\n                  type=\"radio\"\n                  value=\"spacy-lib\"\n                  checked={this.state.method === 'spacy-lib'}\n                  onChange={this.handleAnalysisMethodChange}\n                />\n                <span className=\"wom-form__controls__method-options__radio\"></span>\n              </label>\n            </p>\n            <p>\n              <label>\n                τους αλγορίθμους γραμματικής\n                <input\n                  type=\"radio\"\n                  value=\"grammatical-algorithms\"\n                  checked={this.state.method === 'grammatical-algorithms'}\n                  onChange={this.handleAnalysisMethodChange}\n                />\n                <span className=\"wom-form__controls__method-options__radio\"></span>\n              </label>\n            </p>\n          </section>\n        </section>\n        <input className=\"wom-form__input\" type=\"submit\" value=\"Aνάλυση\" />\n        {hasResults && this.showResults()}\n      </form>\n    )\n  }\n}\nexport default WriteOMeterForm\n","export const API_HOST = 'https://vzjega.deta.dev'\n\nexport function analyze(text: string) {\n  return fetch(`${API_HOST}/analyze`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      text,\n    }),\n  })\n}\n","import React from 'react';\nimport './App.css';\nimport WriteOMeterForm from './WriteOMeterForm'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Γραφῶμετρο</h1>\n      </header>\n      <WriteOMeterForm/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}